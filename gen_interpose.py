#!/usr/bin/env python

import sys, random
if len(sys.argv) > 1: MAXDELAY = int(sys.argv[1])
else: MAXDELAY = 50

# interpose.c template strings
header = ""
libraries = "#define _GNU_SOURCE\n" \
            "#include <dlfcn.h>\n"  \
            "#include <pthread.h>\n\n"
func_head = "{ret}{space}{func_name}({func_args})\n"
# add "{\n"
func_body1 = "\tstatic {ret} (*real_{func_name})({func_args_no_id}) = NULL;\n\tint i;\n" #\
func_timespec1 = "\tstruct timespec req = {(time_t) 0, (long) "
func_timespec2 = "{delay}"
func_timespec3 ="};\n\tnanosleep(&req, NULL);\n"
func_timespec ="\tfor(i=0; i<{delay}; i++)\n\t\tasm(\"nop;\");\n"
func_body2 = "\tif(!real_{func_name})\n"
func_body3 = "\t\treal_{func_name} = dlsym(RTLD_NEXT, \"{func_name}\");\n"
func_ret = "\treturn real_{func_name}({func_args_id});\n" \
# add"}"

# Set of specific functions to add in
extra = '''
int pthread_create(pthread_t * thread, const pthread_attr_t * attr, void * (*start_routine)(void * ), void * arg)
{
	static int (*real_pthread_create)(pthread_t *, const pthread_attr_t *, void * (*lambda)(void *), void *) = NULL;
	int i;
	for(i=0; i<''' + str(MAXDELAY) + '''; i++)
		asm("nop;");
	if(!real_pthread_create)
		real_pthread_create = dlsym(RTLD_NEXT, "pthread_create");
	return real_pthread_create(thread, attr, start_routine, arg);
}
'''
extra += '''
int pthread_join(pthread_t thread, void ** status)
{
	static int (*real_pthread_join)(pthread_t, void **) = NULL;
	int i;
	for(i=0; i<''' + str(MAXDELAY) + '''; i++)
		asm("nop;");
	if(!real_pthread_join)
		real_pthread_join = dlsym(RTLD_NEXT, "pthread_join");
	return real_pthread_join(thread, status);
}
'''

interpose_file = header + libraries + extra

with open("interpose.c", "w") as outfile:
	outfile.write(interpose_file)
